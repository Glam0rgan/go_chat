// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.1
// Source: imrpc.proto

package imrpcclient

import (
	"context"

	"go-im/imrpc/imrpc"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	LoginRequest   = imrpc.LoginRequest
	LoginResponse  = imrpc.LoginResponse
	LogoutRequest  = imrpc.LogoutRequest
	LogoutResponse = imrpc.LogoutResponse
	PostMsg        = imrpc.PostMsg
	PostResponse   = imrpc.PostResponse

	Imrpc interface {
		Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
		Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error)
		PostMessage(ctx context.Context, in *PostMsg, opts ...grpc.CallOption) (*PostResponse, error)
	}

	defaultImrpc struct {
		cli zrpc.Client
	}
)

func NewImrpc(cli zrpc.Client) Imrpc {
	return &defaultImrpc{
		cli: cli,
	}
}

func (m *defaultImrpc) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	client := imrpc.NewImrpcClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultImrpc) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error) {
	client := imrpc.NewImrpcClient(m.cli.Conn())
	return client.Logout(ctx, in, opts...)
}

func (m *defaultImrpc) PostMessage(ctx context.Context, in *PostMsg, opts ...grpc.CallOption) (*PostResponse, error) {
	client := imrpc.NewImrpcClient(m.cli.Conn())
	return client.PostMessage(ctx, in, opts...)
}
